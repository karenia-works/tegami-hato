// <auto-generated />
using System;
using Karenia.TegamiHato.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Karenia.TegamiHato.Server.Migrations
{
    [DbContext(typeof(EmailSystemContext))]
    partial class EmailSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Karenia.TegamiHato.Server.Models.ChannelUserRelation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanEditRoles")
                        .HasColumnName("can_edit_roles")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanReceiveMessage")
                        .HasColumnName("can_receive_message")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanSendMessage")
                        .HasColumnName("can_send_message")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "ChannelId");

                    b.ToTable("channel_user_table");
                });

            modelBuilder.Entity("Karenia.TegamiHato.Server.Models.HatoAttachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnName("content_type")
                        .HasColumnType("text");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnName("filename")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnName("size")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("text");

                    b.Property<Guid>("_HatoMessageMsgId")
                        .HasColumnType("uuid");

                    b.HasKey("AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("_HatoMessageMsgId");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("Karenia.TegamiHato.Server.Models.HatoChannel", b =>
                {
                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChannelTitle")
                        .IsRequired()
                        .HasColumnName("channel_title")
                        .HasColumnType("text");

                    b.Property<string>("ChannelUsername")
                        .HasColumnName("channel_username")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("is_public")
                        .HasColumnType("boolean");

                    b.HasKey("ChannelId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelUsername");

                    b.ToTable("channels");
                });

            modelBuilder.Entity("Karenia.TegamiHato.Server.Models.HatoMessage", b =>
                {
                    b.Property<Guid>("MsgId")
                        .HasColumnType("uuid");

                    b.Property<string>("BodyHtml")
                        .HasColumnName("body_html")
                        .HasColumnType("text");

                    b.Property<string>("BodyPlain")
                        .IsRequired()
                        .HasColumnName("body_plain")
                        .HasColumnType("text");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnName("sender_email")
                        .HasColumnType("text");

                    b.Property<string>("SenderNickname")
                        .HasColumnName("sender_nickname")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("MsgId");

                    b.HasIndex("ChannelId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Karenia.TegamiHato.Server.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasAlternateKey("Email");

                    b.HasIndex("Email");

                    b.HasIndex("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Karenia.TegamiHato.Server.Models.ChannelUserRelation", b =>
                {
                    b.HasOne("Karenia.TegamiHato.Server.Models.HatoChannel", "_Channel")
                        .WithMany("_Users")
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_channel_user_table_channels_channel_temp_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Karenia.TegamiHato.Server.Models.User", "_User")
                        .WithMany("_Channels")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_channel_user_table_users_user_temp_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Karenia.TegamiHato.Server.Models.HatoAttachment", b =>
                {
                    b.HasOne("Karenia.TegamiHato.Server.Models.HatoMessage", "_HatoMessage")
                        .WithMany("attachments")
                        .HasForeignKey("_HatoMessageMsgId")
                        .HasConstraintName("fk_attachments_messages_hato_message_temp_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Karenia.TegamiHato.Server.Models.HatoMessage", b =>
                {
                    b.HasOne("Karenia.TegamiHato.Server.Models.HatoChannel", "_Channel")
                        .WithMany("_Messages")
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_messages_channels_channel_temp_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
